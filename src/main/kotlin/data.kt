data class Notes (

    val noteId: Int,
    val title: String,
    val text: String,
    val ownerId: Int, //создатель заметки
    val date: Int,
    var isDelete: Boolean = false,  // метка для обозначения удаления заметки tru - удален
    var comments: MutableList<Comment> = arrayListOf()
    ) {

    override fun equals(other: Any?): Boolean {
       // if (!this.isDelete) println("объект удален")
        val expected = if (other is Notes) other else return super.equals(other)
        return (this.noteId == expected.noteId) //Заметки будут считаться одинаковыми при равном Id что бы не учитывал помеченные на удаление && !this.isDelete

    }
}

data class Comment (

    val commentId: Int,
    val noteId: Int,
    val message: String,
    val ownerComment: Int, //создатель коммента
    val date: Int,
    val isDelete: Boolean = false  // метка для обозначения удаления комментария tru - удален
)

//    val privacy: Int,
//    val commentPrivacy: Int,
//
//    val title: String,           // Заголовок заметки.
//    val text: String,            // Текст заметки.
//    val privacyView: String,     //Настройки приватности просмотра заметки в специальном формате.
//    val privacyComment: String,  //Настройки приватности комментирования заметки в специальном формате.
//
//    val noteId: String,           // Идентификатор заметки. ?
//    val replyTo: UInt? = null,            // Идентификатор пользователя, ответом на комментарий которого является добавляемый комментарий (не передаётся, если комментарий не является ответом).
//    val message: String,          // Текст комментария.
//
//    val comments: ArrayList<Comment>? = null, //а такое поле там есть? там где? в докуммента
//    // Идентификатор комментария. Это параметр для метода, а не поле Notes //нам дали только описание методов
//    // Класса комментариев ещё нет?
//    // вы же сказали что тип positive это Int положительный
//    // Это не поля Notes// не знаю даже как такие задачи читать. неужеле нельза было нормально составить условия задачи
//    // вам дали требуемой функционал в качестве задания, прописать класс, чтобы этот функционал работал - это уже часть задания?
//    // да тлько нас забыли научить работать с этим функционалом.я например как баоан на новые ворота на этот функционал смотрель и видел только параметры и перечень методо. да еще что вернуть должны
//    // Это параметры метода editComment а что тогда поля notes
//    // Вместо количества комментариев храните массив с комментариями так будет проще
//    // так поля нотес это нужно из другого дз брать чтоли?
//     // Просто от туда проще было найти объекты, но как об этом догадаться. это же не написано
//    // Поля вы можете взять не из документации, напишите только те которые понадобятся для реализации методов
//    // ничего я не понял. !
//    // Это всё нужно, так как add создаёт новую заметку и это поля класса и параметры метода add?
// // а поччему тогда   - это не поля класса. как понять что поля п
//    // только 2 выделенных будут полями, остальное относится к выборке и сортировке/ как догадоться то об этом по тексту?
//    // тоесть то что описывает действие то к методу, что название переменной то к классу?
//    // Соответственно этот массив должен быть
//    val userId: UInt? = null,                 // Идентификатор пользователя, информацию о заметках которого требуется получить.
//    val offset: UInt? = null,                 // Смещение, необходимое для выборки определенного подмножества заметок.
//    val count: UInt? = null,                 // Количество заметок, информацию о которых необходимо получить.
//    val sort: UInt? = null,                  // Сортировка результатов (0 — по дате создания в порядке убывания, 1 - по дате создания в порядке возрастания).
//
//    val needWiki: Boolean          // Определяет, требуется ли в ответе wiki-представление заметки (работает, только если запрашиваются заметки текущего пользователя).

{

    override fun equals(other: Any?): Boolean {
        val expected = if (other is Comment) other else return super.equals(other)
        return this.commentId == expected.commentId //Заметки будут считаться одинаковыми при равном Id

    }
}

